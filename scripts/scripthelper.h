#ifndef SCRIPTHELPER_H
#define SCRIPTHELPER_H

#include <vector>
#include "sol.hpp"
#include "r3d.hpp"

class World;
class DamageInfo;
class CharacterIntermediate;
class ScriptHelper
{
public:
    ScriptHelper(World *world);
    bool LoadLuaFile(std::string name);
    sol::state_view State();
protected:
    sol::state mState;
    World *pWorld;

    bool IsDampener(sol::stack_object object);
    bool IsObjectAI(sol::stack_object obj);
    bool IsObjectHero(sol::stack_object obj);
    bool IsTurretAI(sol::stack_object obj);
    float DistPoint3DSegment3D(sol::stack_object pos, sol::stack_object point1, sol::stack_object point2);
    float GetTime();
    int GetDampenerType(sol::stack_object obj);
    int GetHQType(sol::stack_object obj);
    int GetHashedGameObjName(std::string string);
    int GetID(sol::stack_object owner);
    int GetLane(sol::stack_object laneBuilding);
    int GetObjectLaneId(sol::stack_object obj);
    int GetTeamID(sol::stack_object owner);
    int GetTotalTeamMinionsSpawned();
    int GetTurretPosition(sol::stack_object obj);
    sol::object Add3dPoints(sol::stack_object point1, sol::stack_object point2);
    sol::object GetBarracks(int team, int lane, sol::this_state thisState);
    sol::object GetDampener(int team, int lane, sol::this_state thisState);
    sol::object GetHQ(int team, sol::this_state thisState);
    sol::object GetLinkedBarrack(sol::stack_object dampener, sol::this_state thisState);
    sol::object GetNormalizedPositionDelta(sol::stack_object endObj, sol::stack_object startObj, bool shouldIgnoreY, sol::this_state thisState);
    sol::object GetPosition(sol::stack_object owner, sol::this_state thisState);
    sol::object GetTurret(int team, int lane, int position, sol::this_state thisState);
    sol::object GetTutorialPlayer();
    r3dPoint3D Make3DPoint(float x, float y, float z, sol::this_state thisState);
    sol::object Multiply3dPointByScalar(sol::stack_object point, float scalar, sol::this_state thisState);
    std::string GetUnitSkinName(sol::stack_object unit);
    void AssignTeamGold(int teamID, float gold);
    void CreateChildTurret(std::string name, std::string skinName, int team, int turretIndex, int lane);
    void CreateGameObject(std::string name, std::string fileName, sol::stack_object position);
    void EndGame(int winningTeam);
    void FacePosition(sol::stack_object target, sol::stack_object targetPos);
    void GiveExpToNearHeroesFromNeutral(sol::stack_object killer, float exp, sol::stack_object position, float radius);
    void IncExp(sol::stack_object champion, float exp);
    void IncGold(sol::stack_object object, float goldAmount);
    void IncPosition(sol::stack_object owner, sol::stack_object delta);
    void InitTimer(std::string timerName, float delay, bool repeat);
    void LoadScriptIntoScript(std::string name);
    void LockCamera(bool lock);
    void Log(std::string message);
    void MakeSay(sol::stack_object talker, std::string message);
    void PauseGame();
    void PlayTutorialAudioEvent(std::string eventID, std::string luaCallbackName);
    void PreloadCharacter(std::string name);
    void PreloadParticle(std::string name);
    void PreloadSpell(std::string name);
    void ResumeGame();
    void SetBarracksEnabled(sol::stack_object barrack, bool state);
    void SetCircularCameraRestriction(sol::stack_object center, float radius);
    void SetDampenerState(sol::object dampener, int state);
    void SetDisableMinionSpawn(sol::stack_object barrack, float respawnTime);
    void SetInputLockingFlag(int flag, bool flagValue);
    void SetLaneAffinity(std::string name, int turretIndex, int lane);
    void SetPosition(sol::stack_object target, sol::stack_object targetPos);
    void SpawnNeutralMinion(sol::object neutralCamp, int groupNumber, int groupIndex, int nameIndex);
    void ToggleFogOfWar();
    void ToggleFogOfWarOn();
    void ToggleInputLockingFlag(int flag);
    void _ALERT(std::string message);
    void luaNeutralInitTimer(sol::object functionName, float delay, bool repeat);

    //Damage
    DamageInfo* sDamageInfo;
    int GetDamageType();
    int GetSourceType();
    float GetDamageAmount();
    float GetPercentageOfAttack();
    sol::object GetAttacker();
    int GetHitResult();

    //BuildingBlocks
    void BBSetCameraPosition(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBIsPathable(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBTeleportToKeyLocation(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBTeleportToPosition(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetNearestPassablePosition(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBForEachUnitInTargetAreaAddBuff(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBForEachUnitInTargetArea(sol::stack_object passThrough, sol::stack_object perBlockParams, sol::stack_object subBlocks);
    void BBForEachUnitInTargetAreaRandom(sol::stack_object passThrough, sol::stack_object perBlockParams, sol::stack_object subBlocks);
    void BBForNClosestUnitsInTargetArea(sol::stack_object passThrough, sol::stack_object perBlockParams, sol::stack_object subBlocks);
    void BBForEachChampion(sol::stack_object passThrough, sol::stack_object perBlockParams, sol::stack_object subBlocks);
    void BBForEachUnitInTargetRectangle(sol::stack_object passThrough, sol::stack_object perBlockParams, sol::stack_object subBlocks);
    void BBGetRandomPointInAreaUnit(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetRandomPointInAreaPosition(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetUnitPosition(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetSkinID(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetPointByUnitFacingOffset(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetMissilePosFromID(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBModifyPosition(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBIncFlatPARPoolMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBIncFlatPARRegenMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBIncPercentPARPoolMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBIncPercentPARRegenMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBIncPermanentFlatPARPoolMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBIncPermanentFlatPARRegenMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBIncPermanentPercentPARPoolMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBIncPermanentPercentPARRegenMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetFlatPARPoolMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetFlatPARRegenMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetPercentPARPoolMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetPercentPARRegenMod(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBApplyDamage(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBApplyStun(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBApplyPacified(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBApplyNet(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBApplyDisarm(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBApplySuppression(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBApplySilence(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBApplyRoot(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBApplyTaunt(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBApplyCharm(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBApplyFear(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBApplySleep(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBApplyNearSight(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBApplyNoRender(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBApplyForceRenderParticles(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBApplyStealth(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBApplyRevealSpecificUnit(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBApplySuppressCallForHelp(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBApplyCallForHelpSuppresser(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBApplyIgnoreCallForHelp(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBIncPAR(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBIncGold(sol::stack_object passThrough, sol::stack_object perBlockParams);
    float BBLuaGetGold(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBIncHealth(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBDrawDefaultHitEffects(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetCastSpellTargetPos(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBAdjustCastInfoCenterAOE(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSpawnPet(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSpawnMinion(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBCloneUnit(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBCloneUnitPet(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBIncExp(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBForEachPetInTarget(sol::stack_object passThrough, sol::stack_object perBlockParams, sol::stack_object subBlocks);
    void BBSetDodgePiercing(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetStateDisableAmbientGold(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetStunned(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetPacified(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetNetted(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetDisarmed(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetRooted(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetSuppressCallForHelp(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetCallForHelpSuppresser(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBRedirectGold(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetTargetingType(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetSpell(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetBuffCasterUnit(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetTriggerUnit(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetUnit(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBInvalidateUnit(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBForceDead(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetIgnoreCallForHelp(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSpellBuffAdd(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBTimeChannelTickExecute(sol::stack_object passThrough, sol::stack_object perBlockParams, sol::stack_object subBlocks);
    void BBBreak(sol::stack_object passThrough, sol::stack_object perBlockParams, sol::stack_object subBlocks);
    void BBSpellBuffRemoveType(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSpellBuffRemove(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSpellBuffRemoveCurrent(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSpellBuffClear(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetBuffRemainingDuration(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSpellEffectCreate(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSpellEffectRemove(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBStopChanneling(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBStopMove(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBMove(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBMoveAway(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBDestroyMissile(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBDestroyMissileForTarget(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSpellCast(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBCancelAutoAttack(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBOverrideAutoAttack(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBRemoveOverrideAutoAttack(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetAutoAttackTargetingFlags(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetPetReturnRadius(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBCreateItem(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSealSpellSlot(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetBuffToolTipVar(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetSpellToolTipVar(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBLinkVisibility(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBIsInBrush(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetHeightDifference(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBRemoveLinkVisibility(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetNearSight(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetNearSight(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetPetOwner(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBStartTrackingCollisions(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBStopMoveBlock(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBStopCurrentOverrideAnimation(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBPreloadCharacter(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBPreloadParticle(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBPreloadSpell(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBDispellPositiveBuffs(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBDispellNegativeBuffs(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBRemovePerceptionBubble(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBAddUnitPerceptionBubble(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBAddPosPerceptionBubble(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBPlayAnimation(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBUnlockAnimation(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetNumberOfHeroesOnTeam(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBCanSeeTarget(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBPushCharacterData(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetSlotSpellCooldownTimeVer2(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBPopCharacterData(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBPopAllCharacterData(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBPushCharacterFade(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBPopCharacterFade(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBForEachPointAroundCircle(sol::stack_object passThrough, sol::stack_object perBlockParams, sol::stack_object subBlocks);
    void BBSetCharacterDebugRadius(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBForEachPointOnLine(sol::stack_object passThrough, sol::stack_object perBlockParams, sol::stack_object subBlocks);
    void BBFaceDirection(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetGameTime(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetChampionBySkinName(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBPauseAnimation(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBEnableWallOfGrassTracking(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBShowHealthBar(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBClearOverrideAnimation(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBOverrideAnimation(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBIncSpellLevel(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetPARCostInc(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetPARCostInc(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetPARMultiplicativeCostInc(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetPARMultiplicativeCostInc(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSetInCastTable(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBOverrideCastRange(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetCastRange(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBAddDebugCircle(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBRemoveDebugCircle(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBModifyDebugCircleRadius(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBModifyDebugCircleColor(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBApplyAssistMarker(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBSkipNextAutoAttack(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBIncMaxHealth(sol::stack_object passThrough, sol::stack_object perBlockParams);
    void BBGetIsZombie(sol::stack_object passThrough, sol::stack_object perBlockParams);
    float GetCFParam(sol::stack_object passThrough, sol::stack_object perBlockParams, std::string parramName);

    void Say(sol::stack_object owner, std::string message);
    void ApplyStun(sol::stack_object owner, sol::stack_object target, float duration);
    void ApplyPacified(sol::stack_object owner, sol::stack_object target, float duration);
    void ApplyNet(sol::stack_object owner, sol::stack_object target, float duration);
    void ApplyDisarm(sol::stack_object owner, sol::stack_object target, float duration);
    void ApplyRoot(sol::stack_object owner, sol::stack_object target, float duration);
    void ApplySilence(sol::stack_object owner, sol::stack_object target, float duration);
    void ApplySuppression(sol::stack_object owner, sol::stack_object target, float duration);
    void ApplySuppressCallForHelp(sol::stack_object owner, sol::stack_object target, float duration);
    void ApplyIgnoreCallForHelp(sol::stack_object owner, sol::stack_object target, float duration);
    void ApplyCallForHelpSuppresser(sol::stack_object owner, sol::stack_object target, float duration);
    void CancelOrder(sol::stack_object owner);
    void ChannelingStart(sol::stack_object caster, sol::stack_object target, float duration, float timeBeetwenUpdate);
    void ChannelingStop(sol::stack_object caster, int whyStoppedCondition, int whyStoppedSource);
    void DrawDefaultHitEffects(sol::stack_object target);
    bool GetIsAttackOverride();
    int GetCastSpellLevelPlusOne();
    sol::object GetCastSpellTargetPos();
    int GetCastSpellTargetsHitPlusOne();
    sol::object GetCastSpellLuaInfo();
    int GetCasterID();
    float GetHealth(sol::stack_object target, int formal);
    float GetHealthPercent(sol::stack_object target ,int formal);
    bool GetInvulnerable(sol::stack_object target);
    bool GetPhysicalImmune(sol::stack_object target);
    bool GetTargetable(sol::stack_object target);
    bool GetTargetableToTeam(sol::stack_object target, int team);
    bool GetMagicImmune(sol::stack_object target);
    float GetPAR(sol::stack_object target, int parType);
    float GetPARCost();
    float GetPARPercent(sol::stack_object target, int parType);
    int GetPARType(sol::stack_object target);
    bool HasPARType(sol::stack_object target, int parType);
    float GetMaxHealth(sol::stack_object target, int formal);
    float GetMaxPAR(sol::stack_object target,int parType);
    std::string GetName(sol::stack_object obj);
    float GetArmor(sol::stack_object target);
    float GetSpellBlock(sol::stack_object target);
    float GetDodge(sol::stack_object target);
    float GetMissChance(sol::stack_object target);
    float GetAttackSpeedMod(sol::stack_object target);
    float GetMovementSpeed(sol::stack_object target);
    float GetLevel(sol::stack_object  target);
    float GetTotalAttackDamage(sol::stack_object target);
    float GetSlotSpellCooldownTime(sol::stack_object target, int slot, int spellbookType, int slotType);
    int GetSlotSpellLevel(sol::stack_object target, int slot, int spellbookType, int slotType);
    std::string GetSlotSpellName(sol::stack_object target, int slot, int spellbookType, int slotType);
    std::string GetSpellName();
    int GetSpellSlot();

    bool GetNoRender(sol::stack_object target);
    bool GetBrushVisibilityFake(sol::stack_object target);
    bool GetForceRenderParticles(sol::stack_object target);
    bool GetStealthed(sol::stack_object target);
    bool GetRevealSpecificUnit(sol::stack_object target);
    bool GetTaunted(sol::stack_object target);
    bool GetCharmed(sol::stack_object target);
    bool GetSuppressed(sol::stack_object target);
    bool GetFeared(sol::stack_object target);
    bool GetDisableAmbientGold(sol::stack_object target);
    void SetDisableAmbientGold(sol::stack_object target, bool value);
    bool GetSleep(sol::stack_object target);
    bool GetNearSight(sol::stack_object target);
    bool GetGhosted(sol::stack_object target);
    bool GetGhostProof(sol::stack_object target);

    void IncHealth(sol::stack_object target, float value);
    void IncMana(sol::stack_object target, float value);
    void IncMoveSpeedFloorMod(float value, sol::stack_object target);
    void IncFlatDodgeMod(float value, sol::stack_object target);
    void IncFlatMissChanceMod(float value, sol::stack_object target);
    void IncPercentArmorPenetrationMod(float value, sol::stack_object target);
    void IncPercentMagicPenetrationMod(float value, sol::stack_object target);
    void IncPercentMultiplicativeAttackSpeedMod(float value, sol::stack_object target);
    void IncPercentMultiplicativeMovementSpeedMod(float value, sol::stack_object target);

    void IssueOrder(sol::stack_object owner,int order, sol::stack_object pos, sol::stack_object caster);
    void RaiseSpellFlag(int flag);
    void ReincarnateNonDeadHero(sol::stack_object target);

    void SetCanCastWhileDisabled(bool value);
    void SetInvulnerable(sol::stack_object target, bool value);
    void SetTargetable(sol::stack_object target, bool value);
    void SetNotTargetableToTeam(sol::stack_object target, bool value, int team);
    void SetPhysicalImmune(sol::stack_object target, bool value);
    void SetMagicImmune(sol::stack_object target, bool value);
    void SetRooted(sol::stack_object target, bool value);
    void SetScaleSkinCoef(float coef, sol::stack_object target);
    void SetSilenced(sol::stack_object target, bool value);
    void SetSlotSpellCooldownTime(sol::stack_object target, int slot,int spellbookType ,int slotType, float time);
    void SetStealthed(sol::stack_object target, bool value);
    void SetRevealSpecificUnit(sol::stack_object target, bool value);
    void SetStunned(sol::stack_object target, bool value);
    void SetPacified(sol::stack_object target, bool value);
    void SetNetted(sol::stack_object target, bool value);
    void SetDisarmed(sol::stack_object target, bool value);
    void SetTaunted(sol::stack_object target, bool value);
    void SetCharmed(sol::stack_object target, bool value);
    void SetFeared(sol::stack_object target, bool value);
    void SetSleep(sol::stack_object target, bool value);
    void SetNearSight(sol::stack_object target, bool value);
    void SetNoRender(sol::stack_object target, bool value);
    void SetForceRenderParticles(sol::stack_object target, bool value);
    void SetGhosted(sol::stack_object target, bool value);
    void SetSuppressed(sol::stack_object target, bool value);
    void SetGhostProof(sol::stack_object target, bool value);
    void SetSuppressCallForHelp(sol::stack_object target, bool value);
    void SetCallForHelpSuppresser(sol::stack_object target, bool value);
    void SetBrushVisibilityFake(sol::stack_object target, bool value);
    void SetIgnoreCallForHelp(sol::stack_object target, bool value);

    void SpellBuffAdd(sol::stack_object caster, sol::stack_object target, std::string name, int type, int maxStack, float duration, sol::stack_object luaBuffVars);
    void SpellBuffAddNoRenew(sol::stack_object caster, sol::stack_object target, std::string name, int type, int maxStack, float duration, sol::stack_object luaBuffVars);
    int SpellBuffCount(sol::stack_object target, std::string name, sol::stack_object caster);
    void SpellBuffRemove(sol::stack_object target, std::string name, sol::stack_object caster);
    void SpellBuffRemoveCurrent(sol::stack_object target);
    void SpellBuffRemoveType(sol::stack_object target, int type);
    bool HasBuffOfType(sol::stack_object target, int type);
    unsigned long SpellEffectCreate(std::string effectName,sol::stack_object pos, sol::stack_object bindObject ,sol::stack_object flags);
    void TeleportToKeyLocation(sol::stack_object owner, int locationEnum, int team);
    void TeleportToPosition(sol::stack_object owner, sol::stack_object position);
    int GetAIState(sol::stack_object target);

    bool GetCanAttack(sol::stack_object target);
    bool GetCanCast(sol::stack_object target);
    bool IsAutoCastOn(sol::stack_object target);
    bool GetCanMove(sol::stack_object target);
    void SetCanAttack(sol::stack_object target, bool state);
    void SetCanCast(sol::stack_object target, bool state);
    void SetCanMove(sol::stack_object target, bool state);

    bool IsBaseAI(sol::stack_object obj);
    bool IsHeroAI(sol::stack_object obj);
    bool IsMelee(sol::stack_object obj);
    bool IsRanged(sol::stack_object obj);
    bool IsMoving(sol::stack_object obj);

    void IncFlatGoldPer10Mod(float delta, sol::stack_object target);
    void IncPermanentFlatGoldPer10Mod(float delta, sol::stack_object target);
    void IncBaseAttackDamage(float delta, sol::stack_object target);
    void IncPermanentBaseAttackDamage(float delta, sol::stack_object target);
    void IncFlatArmorMod(float delta, sol::stack_object target);
    void IncPermanentFlatArmorMod(float delta, sol::stack_object target);
    void IncFlatArmorPenetrationMod(float delta, sol::stack_object target);
    void IncPermanentFlatArmorPenetrationMod(float delta, sol::stack_object target);
    void IncFlatMagicPenetrationMod(float delta, sol::stack_object target);
    void IncPermanentFlatMagicPenetrationMod(float delta, sol::stack_object target);
    void IncFlatSpellBlockMod(float delta, sol::stack_object target);
    void IncPermanentFlatSpellBlockMod(float delta, sol::stack_object target);
    void IncFlatAttackRangeMod(float delta, sol::stack_object target);
    void IncPermanentFlatAttackRangeMod(float delta, sol::stack_object target);
    void IncFlatCastRangeMod(float delta, sol::stack_object target);
    void IncPermanentFlatCastRangeMod(float delta, sol::stack_object target);
    void IncFlatCooldownMod(float delta, sol::stack_object target);
    void IncPermanentFlatCooldownMod(float delta, sol::stack_object target);
    void IncFlatCritChanceMod(float delta, sol::stack_object target);
    void IncPermanentFlatCritChanceMod(float delta, sol::stack_object target);
    void IncFlatCritDamageMod(float delta, sol::stack_object target);
    void IncPermanentFlatCritDamageMod(float delta, sol::stack_object target);
    void IncFlatHPPoolMod(float delta, sol::stack_object target);
    void IncPermanentFlatHPPoolMod(float delta, sol::stack_object target);
    void IncFlatHPRegenMod(float delta, sol::stack_object target);
    void IncPermanentFlatHPRegenMod(float delta, sol::stack_object target);
    void IncFlatMagicDamageMod(float delta, sol::stack_object target);
    void IncPermanentFlatMagicDamageMod(float delta, sol::stack_object target);
    void IncFlatMagicReduction(float delta, sol::stack_object target);
    void IncPermanentFlatMagicReduction(float delta, sol::stack_object target);
    void IncFlatMovementSpeedMod(float delta, sol::stack_object target);
    void IncPermanentFlatMovementSpeedMod(float delta, sol::stack_object target);
    void IncFlatPhysicalDamageMod(float delta, sol::stack_object target);
    void IncPermanentFlatPhysicalDamageMod(float delta, sol::stack_object target);
    void IncFlatPhysicalReduction(float delta, sol::stack_object target);
    void IncPermanentFlatPhysicalReduction(float delta, sol::stack_object target);
    void IncFlatBubbleRadiusMod(float delta, sol::stack_object target);
    void IncPermanentFlatBubbleRadiusMod(float delta, sol::stack_object target);
    void IncPercentHardnessMod(float delta, sol::stack_object target);
    void IncPermanentPercentHardnessMod(float delta, sol::stack_object target);
    void IncPercentArmorMod(float delta, sol::stack_object target);
    void IncPermanentPercentArmorMod(float delta, sol::stack_object target);
    void IncPercentSpellBlockMod(float delta, sol::stack_object target);
    void IncPermanentPercentSpellBlockMod(float delta, sol::stack_object target);
    void IncPercentAttackRangeMod(float delta, sol::stack_object target);
    void IncPermanentPercentAttackRangeMod(float delta, sol::stack_object target);
    void IncPercentAttackSpeedMod(float delta, sol::stack_object target);
    void IncPermanentPercentAttackSpeedMod(float delta, sol::stack_object target);
    void IncPercentCastRangeMod(float delta, sol::stack_object target);
    void IncPermanentPercentCastRangeMod(float delta, sol::stack_object target);
    void IncPercentCooldownMod(float delta, sol::stack_object target);
    void IncPermanentPercentCooldownMod(float delta, sol::stack_object target);
    void IncPercentCritDamageMod(float delta, sol::stack_object target);
    void IncPermanentPercentCritDamageMod(float delta, sol::stack_object target);
    void IncPercentEXPBonus(float delta, sol::stack_object target);
    void IncPermanentPercentEXPBonus(float delta, sol::stack_object target);
    void IncPercentHPPoolMod(float delta, sol::stack_object target);
    void IncPermanentPercentHPPoolMod(float delta, sol::stack_object target);
    void IncPercentHPRegenMod(float delta, sol::stack_object target);
    void IncPermanentPercentHPRegenMod(float delta, sol::stack_object target);
    void IncPercentHealingAmountMod(float delta, sol::stack_object target);
    void IncPermanentPercentHealingAmountMod(float delta, sol::stack_object target);
    void IncPercentLifeStealMod(float delta, sol::stack_object target);
    void IncPermanentPercentLifeStealMod(float delta, sol::stack_object target);
    void IncPercentSpellVampMod(float delta, sol::stack_object target);
    void IncPermanentPercentSpellVampMod(float delta, sol::stack_object target);
    void IncPercentMagicDamageMod(float delta, sol::stack_object target);
    void IncPermanentPercentMagicDamageMod(float delta, sol::stack_object target);
    void IncPercentMagicReduction(float delta, sol::stack_object target);
    void IncPermanentPercentMagicReduction(float delta, sol::stack_object target);
    void IncPercentMovementSpeedMod(float delta, sol::stack_object target);
    void IncPermanentPercentMovementSpeedMod(float delta, sol::stack_object target);
    void IncPercentPhysicalDamageMod(float delta, sol::stack_object target);
    void IncPermanentPercentPhysicalDamageMod(float delta, sol::stack_object target);
    void IncPercentPhysicalReduction(float delta, sol::stack_object target);
    void IncPermanentPercentPhysicalReduction(float delta, sol::stack_object target);
    void IncPercentRespawnTimeMod(float delta, sol::stack_object target);
    void IncPermanentPercentRespawnTimeMod(float delta, sol::stack_object target);
    void IncPercentGoldLostOnDeathMod(float delta, sol::stack_object target);
    void IncPermanentPercentGoldLostOnDeathMod(float delta, sol::stack_object target);
    void IncPercentBubbleRadiusMod(float delta, sol::stack_object target);
    void IncPermanentPercentBubbleRadiusMod(float delta, sol::stack_object target);
    void IncAcquisitionRangeMod(float delta, sol::stack_object target);
    void IncPermanentAcquisitionRangeMod(float delta, sol::stack_object target);
    float GetFlatGoldPer10Mod(sol::stack_object target);
    float GetBaseAttackDamage(sol::stack_object target);
    float GetFlatArmorMod(sol::stack_object target);
    float GetFlatArmorPenetrationMod(sol::stack_object target);
    float GetFlatMagicPenetrationMod(sol::stack_object target);
    float GetFlatSpellBlockMod(sol::stack_object target);
    float GetFlatAttackRangeMod(sol::stack_object target);
    float GetFlatCastRangeMod(sol::stack_object target);
    float GetFlatCooldownMod(sol::stack_object target);
    float GetFlatCritChanceMod(sol::stack_object target);
    float GetFlatCritDamageMod(sol::stack_object target);
    float GetFlatHPPoolMod(sol::stack_object target);
    float GetFlatHPRegenMod(sol::stack_object target);
    float GetFlatMagicDamageMod(sol::stack_object target);
    float GetFlatMagicReduction(sol::stack_object target);
    float GetFlatMovementSpeedMod(sol::stack_object target);
    float GetFlatPhysicalDamageMod(sol::stack_object target);
    float GetFlatPhysicalReduction(sol::stack_object target);
    float GetFlatBubbleRadiusMod(sol::stack_object target);
    float GetPercentHardnessMod(sol::stack_object target);
    float GetPercentArmorMod(sol::stack_object target);
    float GetPercentSpellBlockMod(sol::stack_object target);
    float GetPercentAttackRangeMod(sol::stack_object target);
    float GetPercentAttackSpeedMod(sol::stack_object target);
    float GetPercentCastRangeMod(sol::stack_object target);
    float GetPercentCooldownMod(sol::stack_object target);
    float GetPercentCritDamageMod(sol::stack_object target);
    float GetPercentEXPBonus(sol::stack_object target);
    float GetPercentHPPoolMod(sol::stack_object target);
    float GetPercentHPRegenMod(sol::stack_object target);
    float GetPercentHealingAmountMod(sol::stack_object target);
    float GetPercentLifeStealMod(sol::stack_object target);
    float GetPercentSpellVampMod(sol::stack_object target);
    float GetPercentMagicDamageMod(sol::stack_object target);
    float GetPercentMagicReduction(sol::stack_object target);
    float GetPercentMovementSpeedMod(sol::stack_object target);
    float GetPercentPhysicalDamageMod(sol::stack_object target);
    float GetPercentPhysicalReduction(sol::stack_object target);
    float GetPercentRespawnTimeMod(sol::stack_object target);
    float GetPercentGoldLostOnDeathMod(sol::stack_object target);
    float GetPercentBubbleRadiusMod(sol::stack_object target);
    float GetAcquisitionRangeMod(sol::stack_object target);

    //Extra
    void DefUpdateAura(sol::stack_object centerObj, float range, int scanType, std::string buffName);
    bool BBIsTargetBehindMe(sol::stack_object target, sol::stack_object owner);
    bool BBIsTargetInFrontOfMe(sol::stack_object target, sol::stack_object owner);
    bool IsDead(sol::stack_object target);
    float DistanceBetweenObjects(sol::stack_object obj1, sol::stack_object obj2);
    float DistanceBetweenObjectAndPoint(sol::stack_object obj1, sol::stack_object point);
    float DistanceBetweenPoints(sol::stack_object point1, sol::stack_object point2);
    void SetSpellCastRange(float newRange);

};

#endif // SCRIPTHELPER_H
